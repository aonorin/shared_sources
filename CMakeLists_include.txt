set(VERSION "1.3.3")

set(SUPPORT_NVTOOLSEXT OFF CACHE BOOL "Use NSight for custom markers")
if(WIN32)
  SET( MEMORY_LEAKS_CHECK OFF CACHE BOOL "Check for Memory leaks" )
  SET(USE_GLFW OFF CACHE BOOL "Use GLFW instead of our own simple Window management")
else(WIN32)
  SET(USE_GLFW ON CACHE BOOL "Use GLFW instead of our own simple Window management")
endif(WIN32)

SET(RESOURCE_DIRECTORY "${BASE_DIRECTORY}/shared_sources/resources")
add_definitions(-DRESOURCE_DIRECTORY="${RESOURCE_DIRECTORY}/")

Message(STATUS "BASE_DIRECTORY = ${BASE_DIRECTORY}")
Message(STATUS "CMAKE_CURRENT_SOURCE_DIR = ${CMAKE_CURRENT_SOURCE_DIR}")

# Specify the list of directories to search for cmake modules.
set(CMAKE_MODULE_PATH
    ${BASE_DIRECTORY}/shared_sources/cmake
)

set( CMAKE_FIND_ROOT_PATH "")

if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
  set (ARCH "x64" CACHE STRING "CPU Architecture")
else ()
  set (ARCH "x86" CACHE STRING "CPU Architecture")
endif()

set(EXECUTABLE_OUTPUT_PATH
    ${BASE_DIRECTORY}/bin_${ARCH}
    CACHE PATH
    "Directory where executables will be stored"
)

# Set the default build to Release.  Note this doesn't do anything for the VS
# default build target.
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release" CACHE STRING
      "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel."
      FORCE)
endif(NOT CMAKE_BUILD_TYPE)


#####################################################################################
function(_make_relative FROM TO OUT)
  #message(STATUS "FROM = ${FROM}")
  #message(STATUS "TO = ${TO}")
  
  get_filename_component(FROM ${FROM} ABSOLUTE)
  get_filename_component(TO ${TO} ABSOLUTE)
  
  string(REPLACE "/" ";" FROM_LIST ${FROM})
  string(REPLACE "/" ";" TO_LIST ${TO})
  
  #message(STATUS "FROM = ${FROM_LIST}")
  #message(STATUS "TO = ${TO_LIST}")
  
  list(LENGTH FROM_LIST flen)
  math(EXPR flen "${flen} - 1" )
  #message(STATUS "flen = ${flen}")
  list(LENGTH TO_LIST tlen)
  math(EXPR tlen "${tlen} - 1" )
  #message(STATUS "tlen = ${tlen}")
  
  set(REL_LIST)
  foreach(loop_var RANGE ${flen})
    #message(STATUS "i = ${loop_var}")
    if ((loop_var GREATER tlen) OR (loop_var EQUAL tlen))
      list(APPEND REL_LIST "..")
      #message(STATUS "descend")
    else()
      list(GET FROM_LIST ${loop_var} f)
      list(GET TO_LIST ${loop_var} t)
      #message(STATUS "f = ${f}")
      #message(STATUS "t = ${t}")
      if (${f} STREQUAL ${t})
        set(begin ${loop_var})
        #message(STATUS "equal")
      else()
        list(APPEND REL_LIST "..")
        #message(STATUS "descend")
      endif()
    endif()
  endforeach(loop_var)
  math(EXPR begin "${begin} + 1" )
  
  #message(STATUS "---")
  
  foreach(loop_var RANGE ${begin} ${tlen})
    #message(STATUS "i = ${loop_var}")
    #message(STATUS "t = ${t}")
    #message(STATUS "ascend")
    list(GET TO_LIST ${loop_var} t)
    list(APPEND REL_LIST ${t})
  endforeach(loop_var)
  
  #message(STATUS "relative = ${REL_LIST}")

  string (REPLACE ";" "/" _TMP_STR "${REL_LIST}")
  set (${OUT} "${_TMP_STR}" PARENT_SCOPE)
endfunction()

macro(_add_project_definitions name)
  if(MSVC)
    _make_relative("${EXECUTABLE_OUTPUT_PATH}/config" "${CMAKE_CURRENT_SOURCE_DIR}" TOPROJECT)
  else()
    _make_relative("${EXECUTABLE_OUTPUT_PATH}" "${CMAKE_CURRENT_SOURCE_DIR}" TOPROJECT)
  endif()
  
  #message(STATUS "${TOPROJECT}")
  
  add_definitions(-DPROJECT_RELDIRECTORY="${TOPROJECT}/")
  add_definitions(-DPROJECT_ABSDIRECTORY="${CMAKE_CURRENT_SOURCE_DIR}/")
  add_definitions(-DPROJECT_NAME="${name}")  
  
endmacro(_add_project_definitions)

#####################################################################################
if(UNIX) 
  set(OS "linux")
  add_definitions(-DLINUX)
else(UNIX)
  if(APPLE)
  else(APPLE)
    if(WIN32)
      set(OS "win")
      add_definitions(-DNOMINMAX)
      if(MEMORY_LEAKS_CHECK)
        add_definitions(-DMEMORY_LEAKS_CHECK)
      endif()
    endif(WIN32)
  endif(APPLE)
endif(UNIX)


if (MSVC90)
  include_directories(${BASE_DIRECTORY}/shared_external/stdint_old_msvc)
endif(MSVC90)


# Macro for adding files close to the executable
macro(_copy_files_to_target target thefiles)
    if(WIN32)
        foreach (FFF ${thefiles} )
          if(EXISTS "${FFF}")
            add_custom_command(
              TARGET ${target} POST_BUILD
              COMMAND ${CMAKE_COMMAND} -E copy_if_different
                ${FFF}
                $<TARGET_FILE_DIR:${target}>
                VERBATIM
            )
          endif()
        endforeach()
    endif()
endmacro()


# ===============> OpenGL
find_package(OpenGL)
# ===============> GLEW
if (NOT APPLE)
  find_package(GLEW REQUIRED)
  if(NOT GLEW_FOUND)
    message(WARNING "Try to set GLEW_LOCATION")
  else()
    include_directories(${GLEW_INCLUDE_DIR} )
  endif()
endif()
# ===============> GLFW
if(USE_GLFW)
  find_package(GLFW)
  if(GLFW_FOUND AND USE_GLFW)
    include_directories(${GLFW_INCLUDE_DIR} )
  endif()
endif()
#####################################################################################
# Optional UI using Windows MFC
#
macro(_add_package_ZLIB)
  if(EXISTS ${BASE_DIRECTORY}/shared_external/zlib)
    set(ZLIB_ROOT ${BASE_DIRECTORY}/shared_external/zlib)
  endif()
  Message(STATUS "--> using package ZLIB")
  find_package(ZLIB)
  if(ZLIB_FOUND)
      include_directories(${ZLIB_INCLUDE_DIR})
      LIST(APPEND PACKAGE_SOURCE_FILES
        ${ZLIB_HEADERS}
        )
      LIST(APPEND LIBRARIES_OPTIMIZED ${ZLIB_LIBRARY})
      LIST(APPEND LIBRARIES_DEBUG ${ZLIB_LIBRARY})
  else()
    Message(WARNING "ZLIB not available. setting NOGZLIB define")
    add_definitions(-DNOGZLIB)
  endif()
endmacro()
#####################################################################################
# Optional UI using Windows MFC
#
macro(_add_package_MFCUI)
  if(UNIX)
    Message(STATUS "--> package SvcMFCUI not available under Unix")
  else(UNIX)
    find_package(SvcMFCUI)
    Message(STATUS "--> using package SvcMFCUI")
    if(SVCMFCUI_FOUND)
        add_definitions(-DUSESVCUI)
        include_directories(${SVCMFCUI_INCLUDE_DIR})
        LIST(APPEND PACKAGE_SOURCE_FILES
          ${SVCMFCUI_HEADERS}
          #SvcMFCUI.h
          )
        source_group(SvcMFCUI FILES  
          ${SVCMFCUI_HEADERS}
          #SvcMFCUI.h
        )
   endif()
  endif(UNIX)
endmacro()
#####################################################################################
# AntTweakBar UI
#
macro(_add_package_AntTweakBar)
  Message(STATUS "--> using package AntTweakBar")
  find_package(AntTweakBar)
  if(ANTTWEAKBAR_FOUND)
    add_definitions(-DUSEANTTWEAKBAR)
    include_directories(${ANTTWEAKBAR_INCLUDE_DIR})
    LIST(APPEND PACKAGE_SOURCE_FILES 
      ${ANTTWEAKBAR_HEADERS}
    )
    LIST(APPEND LIBRARIES_OPTIMIZED ${ANTTWEAKBAR_LIB})
    LIST(APPEND LIBRARIES_DEBUG ${ANTTWEAKBAR_LIB})
    source_group(AntTweakBar FILES 
      ${ANTTWEAKBAR_HEADERS}
    )
  endif()
endmacro()
#####################################################################################
# OculusSDK package
#
macro(_add_package_OculusSDK)
  Message(STATUS "--> using package OculusSDK")
  find_package(OculusSDK)
  if(OCULUSSDK_FOUND)
    add_definitions(-DUSEOCULUSSDK)
    include_directories(${OCULUSSDK_INCLUDE_DIRS})
    LIST(APPEND LIBRARIES_OPTIMIZED ${OCULUSSDK_LIBS})
    LIST(APPEND LIBRARIES_DEBUG ${OCULUSSDK_LIBS_DEBUG})
  endif()
endmacro()
#####################################################################################
# nvFx package
#
macro(_add_package_nvFx)
  Message(STATUS "--> using package nvFX")
  find_package(nvFx)
  if(NVFX_FOUND)
    add_definitions(-DUSE_NVFX)
    LIST(APPEND LIBRARIES_OPTIMIZED ${NVFX_LIBRARIES} ${NVFX_LIBRARIES_GL} )
    LIST(APPEND LIBRARIES_DEBUG ${NVFX_LIBRARIES} ${NVFX_LIBRARIES_GL} )
    LIST(APPEND PACKAGE_SOURCE_FILES ${NVFX_HEADERS})
    source_group(nvFX FILES ${NVFX_HEADERS})
  endif()
endmacro()
#####################################################################################
#
macro(_add_package_OpenGLText)
  # commented: this is a small external tool that we can make local (in shared_sources), for now
  #if(NOT OPENGLTEXT_FOUND)
  #  find_package(OpenGLText)
  #endif()
  set( OPENGLTEXT_FOUND "YES" )
  Message(STATUS "--> using package OpenGLText")
  if(OPENGLTEXT_FOUND)
    if(NOT OPENGLTEXT_PATH)
        set(OPENGLTEXT_PATH "${BASE_DIRECTORY}/shared_sources/nv_helpers_gl/OpenGLText")
        # in the library shared_source
        set(OPENGLTEXT_CPP 
          ""
          #"${BASE_DIRECTORY}/shared_sources/nv_helpers_gl/OpenGLText/OpenGLText.cpp"
        )
        set(OPENGLTEXT_H "${BASE_DIRECTORY}/shared_sources/nv_helpers_gl/OpenGLText/OpenGLText.h")
    endif()
    add_definitions(-DUSEOPENGLTEXT)
    set(OGLTEXT
      #now in the shared_source library
      #${BASE_DIRECTORY}/shared_sources/nv_helpers_gl/traceDisplay/tracedisplayogl.cpp
      ${BASE_DIRECTORY}/shared_sources/nv_helpers_gl/traceDisplay/tracedisplay.h
      ${BASE_DIRECTORY}/shared_sources/nv_helpers_gl/traceDisplay/trace.h
      ${BASE_DIRECTORY}/shared_sources/nv_helpers_gl/OpenGLText/arial_10.h
      ${BASE_DIRECTORY}/shared_sources/nv_helpers_gl/OpenGLText/arial_10_bitmap.h
      ${BASE_DIRECTORY}/shared_sources/nv_helpers_gl/OpenGLText/baub_16.h
      ${BASE_DIRECTORY}/shared_sources/nv_helpers_gl/OpenGLText/baub_16_bitmap.h
      ${OPENGLTEXT_CPP}
      ${OPENGLTEXT_H}
    )
    source_group(OpenGLText FILES ${OGLTEXT})
    LIST(APPEND PACKAGE_SOURCE_FILES ${OGLTEXT}) 
    include_directories(${OPENGLTEXT_PATH})
    include_directories(${BASE_DIRECTORY}/shared_sources/nv_helpers_gl/OpenGLText)
    include_directories(${BASE_DIRECTORY}/shared_sources/nv_helpers_gl/traceDisplay)
  endif()
endmacro()
#####################################################################################
# Optional OptiX package
#
macro(_add_package_Optix)
  find_package(Optix)  
  if(OPTIX_FOUND)
      Message(STATUS "--> using package OptiX")
      add_definitions(-DUSEOPTIX)
      include_directories(${OPTIX_INCLUDE_DIR})
    LIST(APPEND LIBRARIES_OPTIMIZED ${OPTIX_LIB} )
      LIST(APPEND LIBRARIES_DEBUG ${OPTIX_LIB} )
      LIST(APPEND PACKAGE_SOURCE_FILES ${OPTIX_HEADERS} )
      source_group(OPTIX FILES  ${OPTIX_HEADERS} )
 else()
     Message(STATUS "--> NOT using package OptiX")
 endif()
endmacro()
#####################################################################################
# Optional VulkanSDK package
#
macro(_add_package_VulkanSDK)
  find_package(VulkanSDK)  
  if(VULKANSDK_FOUND)
      Message(STATUS "--> using package VulkanSDK")
      add_definitions(-DUSEVULKANSDK)
      include_directories(${VULKANSDK_INCLUDE_DIR})
    LIST(APPEND LIBRARIES_OPTIMIZED ${VULKAN_LIB} )
      LIST(APPEND LIBRARIES_DEBUG ${VULKAN_LIB} )
      LIST(APPEND PACKAGE_SOURCE_FILES ${VULKANSDK_HEADERS} )
      source_group(OPTIX FILES  ${VULKANSDK_HEADERS} )
 else()
     Message(STATUS "--> NOT using package VulkanSDK")
 endif()
endmacro()
#####################################################################################
# Optional FT-IZB package
#
macro(_add_package_Ftizb)
  find_package(FTIZB)  
  if(FTIZB_FOUND)
      Message(STATUS "--> using package FTIZB")
      add_definitions(-DUSEFTIZB)
      include_directories(${FTIZB_INCLUDE_DIR})
    LIST(APPEND LIBRARIES_OPTIMIZED ${FTIZB_LIB_RELEASE} )
      LIST(APPEND LIBRARIES_DEBUG ${FTIZB_LIB_DEBUG} )
      LIST(APPEND PACKAGE_SOURCE_FILES ${FTIZB_HEADERS} )    
      source_group(FTIZB FILES ${FTIZB_HEADERS} )  
 else()
     Message(STATUS "--> NOT using package OptiX") 
 endif()
endmacro()
#####################################################################################
# Optional CUDA package
#
macro(_add_package_Cuda)
  find_package(CUDA)  
  if(CUDA_FOUND)
      Message(STATUS "--> using package CUDA")
      add_definitions(-DUSECUDA)
      include_directories(${CUDA_INCLUDE_DIR})
    LIST(APPEND LIBRARIES_OPTIMIZED ${CUDA_LIB} )
      LIST(APPEND LIBRARIES_DEBUG ${CUDA_LIB} )
      LIST(APPEND PACKAGE_SOURCE_FILES ${CUDA_HEADERS} )    
      source_group(CUDA FILES ${CUDA_HEADERS} )  
 else()
     Message(STATUS "--> NOT using package CUDA") 
 endif()
endmacro()
#####################################################################################
# Optional OpenCL package
#
macro(_add_package_OpenCL)
  find_package(OpenCL)  
  if(OpenCL_FOUND)
      Message(STATUS "--> using package OpenCL")
      add_definitions(-DUSEOPENCL)
      include_directories(${OpenCL_INCLUDE_DIRS})
    LIST(APPEND LIBRARIES_OPTIMIZED ${OpenCL_LIBRARIES} )
      LIST(APPEND LIBRARIES_DEBUG ${OpenCL_LIBRARIES} )
 else()
     Message(STATUS "--> NOT using package OpenCL") 
 endif()
endmacro()

#####################################################################################
# 
#
set(TINYTHREADPP_DIRECTORY ${BASE_DIRECTORY}/shared_sources/tinythreadpp)

macro(_add_package_tinythreadpp)
  Message(STATUS "--> using package TinyThread++")
  include_directories(${TINYTHREADPP_DIRECTORY}/src)
  set(PROJECT_TINYTHREADPP ${TINYTHREADPP_DIRECTORY}/src/fast_mutex.h ${TINYTHREADPP_DIRECTORY}/src/tinythread.h ${TINYTHREADPP_DIRECTORY}/src/tinythread.cpp)

  LIST(APPEND PACKAGE_SOURCE_FILES
        ${PROJECT_TINYTHREADPP}
        )
endmacro(_add_package_tinythreadpp)

#####################################################################################
#
set(PLATFORM_LIBRARIES
    ${OPENGL_LIBRARY}
)
set(COMMON_SOURCE_FILES)
LIST(APPEND COMMON_SOURCE_FILES
    ${BASE_DIRECTORY}/shared_sources/resources.h
    ${BASE_DIRECTORY}/shared_sources/resources.rc
)

#####################################################################################
# Glew : source or lib
if(GLEW_SOURCE)
  message(STATUS "found Glew source code. Using it instead of library")
  add_definitions(-DGLEW_STATIC)
else()
    message(STATUS "using GLEW library")
    LIST(APPEND PLATFORM_LIBRARIES ${GLEW_LIBRARY})
endif()
add_definitions(-DGLEW_NO_GLU)

#####################################################################################
# GLFW library
if(GLFW_FOUND AND USE_GLFW)
  message(STATUS "using GLFW library ${GLFW_LIBRARY}")
  LIST(APPEND PLATFORM_LIBRARIES ${GLFW_LIBRARY})
  add_definitions(-DUSE_GLFW)
endif()
  
  
 ####################################################################################
 # XF86
 if(UNIX AND NOT USE_GLFW)
 LIST(APPEND PLATFORM_LIBRARIES "Xxf86vm")
endif()

#####################################################################################
# NSight
#
# still need the include directory when no use of NSIGHT: for empty #defines
macro(_add_package_NSight)
  Message(STATUS "--> using package NSight")
  include_directories(
      ${BASE_DIRECTORY}/shared_external/NSight
  )
  if(SUPPORT_NVTOOLSEXT)
    link_directories(
        ${BASE_DIRECTORY}/shared_external/NSight
    )
    LIST(APPEND PACKAGE_SOURCE_FILES 
      ${BASE_DIRECTORY}/shared_external/NSight/NSightEvents.h
      ${BASE_DIRECTORY}/shared_external/NSight/nvToolsExt.h
    )
    add_definitions(-DSUPPORT_NVTOOLSEXT)
    if(ARCH STREQUAL "x86")
      SET(NSIGHT_DLL ${BASE_DIRECTORY}/shared_external/NSight/nvToolsExt32_1.dll)
      SET(NSIGHT_LIB ${BASE_DIRECTORY}/shared_external/NSight/nvToolsExt32_1.lib)
    else()
      SET(NSIGHT_DLL ${BASE_DIRECTORY}/shared_external/NSight/nvToolsExt64_1.dll)
      SET(NSIGHT_LIB ${BASE_DIRECTORY}/shared_external/NSight/nvToolsExt64_1.lib)
    endif()
    LIST(APPEND LIBRARIES_OPTIMIZED ${NSIGHT_LIB})
    LIST(APPEND LIBRARIES_DEBUG ${NSIGHT_LIB})
  endif()
endmacro()

#####################################################################################
# Macro that copies various binaries that need to be close to the exe files
#
macro(_copy_binaries_to_target _PROJNAME)

  if(SUPPORT_NVTOOLSEXT)
    _copy_files_to_target( ${_PROJNAME} "${NSIGHT_DLL}")
    install(FILES "${NSIGHT_DLL}" DESTINATION bin)
    install(FILES "${NSIGHT_DLL}" DESTINATION bin_debug)
  endif()

  if(NOT UNIX)
    if(ZLIB_FOUND)
      _copy_files_to_target( ${_PROJNAME} "${ZLIB_BIN}")
      install(FILES "${ZLIB_BIN}" DESTINATION bin)
      install(FILES "${ZLIB_BIN}" DESTINATION bin_debug)
    endif()

    if(SVCMFCUI_FOUND)
        _copy_files_to_target( ${_PROJNAME} "${SVCMFCUI_DLL}")
        install(FILES "${SVCMFCUI_DLL}" DESTINATION bin)
        if(SVCMFCUID_DLL)
          _copy_files_to_target( ${_PROJNAME} "${SVCMFCUID_DLL}")
          install(FILES "${SVCMFCUID_DLL}" DESTINATION bin_debug)
        endif()
   endif()
  endif()
  if(ANTTWEAKBAR_FOUND)
    _copy_files_to_target( ${_PROJNAME} "${ANTTWEAKBAR_DLL}")
    install(FILES "${ANTTWEAKBAR_DLL}" DESTINATION bin)
    install(FILES "${ANTTWEAKBAR_DLL}" DESTINATION bin_debug)
  endif()
  if(OPTIX_FOUND)
    _copy_files_to_target( ${_PROJNAME} "${OPTIX_DLL}")
    install(FILES "${OPTIX_DLL}" DESTINATION bin)
    install(FILES "${OPTIX_DLL}" DESTINATION bin_debug)
  endif()
  install(TARGETS ${_PROJNAME} DESTINATION bin CONFIGURATIONS Release)
  install(TARGETS ${_PROJNAME} DESTINATION bin_debug CONFIGURATIONS Debug)
endmacro()

include_directories(
    ${BASE_DIRECTORY}/shared_sources
)

#####################################################################################
# Macro to download a file from a URL
#
macro(_download_file _URL _TARGET _FORCE)
  if(${_FORCE} OR (NOT EXISTS ${_TARGET}))
    Message(STATUS "downloading ${_URL} ==> ${_TARGET}")
    file(DOWNLOAD ${_URL} ${_TARGET} SHOW_PROGRESS)
  else()
    Message(STATUS "model ${_TARGET} already loaded...")
  endif()
endmacro()
#
# example: _download_files("${FILELIST}"  "http://..." "${BASE_DIRECTORY}/shared_external/..." ${MODELS_DOWNLOAD_FORCE} )
#
macro(_download_files _FILELIST _URL _TARGET _FORCE )
  foreach(_FILE ${_FILELIST})
    if(${_FORCE} OR (NOT EXISTS "${_TARGET}/${_FILE}"))
      Message(STATUS "*******************************************")
      Message(STATUS "downloading ${_URL}/${_FILE}\n ==>\n ${_TARGET}")
      Message(STATUS "*******************************************")
      file(DOWNLOAD ${_URL}/${_FILE} ${_TARGET}/${_FILE} SHOW_PROGRESS)
    else()
      Message(STATUS "model ${_FILE} already loaded...")
    endif()
  endforeach(_FILE)
endmacro()

#####################################################################################
# Macro to add custom build for Spir-V
# _SOURCE can be more than one file (.vert + .frag)
# _OUTPUT is the .spv file, resulting from the linkage
#
macro(_compile_GLSL _SOURCE _OUTPUT SOURCE_LIST)
  LIST(APPEND ${SOURCE_LIST} ${_SOURCE})
  Message(STATUS "${GLSLANGVALIDATOR} -o ${_OUTPUT} -V ${_SOURCE}")
  Message(STATUS "${_OUTPUT} : ${_SOURCE}")
  if(GLSLANGVALIDATOR)
    add_custom_command(
      OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/${_OUTPUT}
      COMMAND echo ${GLSLANGVALIDATOR} -o ${_OUTPUT} -V ${_SOURCE}
      COMMAND ${GLSLANGVALIDATOR} -o ${_OUTPUT} -V ${_SOURCE}
      MAIN_DEPENDENCY ${_SOURCE}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
      )
  else(GLSLANGVALIDATOR)
    MESSAGE(WARNING "could not find GLSLANGVALIDATOR to compile shaders")
  endif(GLSLANGVALIDATOR)
endmacro()
